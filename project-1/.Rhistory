<<<<<<< HEAD
=======
library(tidyverse)
package(tidyverse)
install.packages("ggplot2")
install.packages("tidyverse")
install.packages("shiny")
shinyApp=(ui=ui, server=server)
shinyApp=(ui = ui, server = server)
package(shiny)
ui <- fluidPage("Hello World")
server <- function(input,output) {}
shinyApp=(ui = ui, server = server)
server <- function(input, output) {}
shinyApp=(ui = ui, server = server)
package(shiny)
shinyApp=(ui = ui, server = server)
ui <- fluidPage("Hello World") %<%
server <- function(input, output) {}%<%
shinyApp=(ui = ui, server = server)%<%
ui <- fluidPage("Hello World")
library(readr)
library(data.table)
library(dplyr)
library(ggplot2)
library(knitr)
library(stringr)
library(DT)
library(lubridate)
library(shiny)
library(treemap)
products <- read_csv("/Users/Jessika/Dropbox/Instacart/produkter.csv")
View(products)
dataselected <- dataselected %>%
filter(EAN %in% products$EAN)
cxt_ui <- function(id, width = "100%", height = "350px", configuration, ...) {
ns <- NS(id)
tagList(
div(class = "module-wrapper", id = ns("menu"),
fluidRow(
column(12,
div(selectInput(ns("period"), "Time period", choices = period_choices, width = "180px"), class = "dropdown"),
div(selectInput(ns("group"), "Grouping", choices = group_choices, width = "180px"),class = "dropdown"),
div(selectInput(ns("selection"), "Selection", choices = NULL, width = "270px"), class = "dropdown")
)
),
hr(style="margin-bottom: 5px;"),
fluidRow(
column(3,
box(
box_head(1, "CUSTOMER EXPERIENCE SCORE"),
div(style = " width: 100%",
div(style = "display: inline-block;  margin: 10px 30px 10px 10px",
highchartOutput(ns("cxScore"), height = "120px", width = "120px")
),
div(style = "display: inline-block; text-align: right; position: relative; margin-top: 30px; float:right;",
tagList(
#ranking_text("12", "45"),
br(), br(),
uiOutput(ns("cxArrow")),
comparison_text(textOutput(ns("cxBench"), inline = TRUE), textOutput(ns("cxLast"), inline = TRUE))
)
)
),
box_foot(div("CX Score (0 - 100)", span(span("benchmark", style = "font-weight: bold;"), "(last period)", style = "float: right;"), style = "padding: 5px 0px;")),
box_foot(""),
div(highchartOutput(ns("cxScoreTrend"), height = "200px"))
)
),
column(3,
box(
box_head(2, "NET PROMOTER SCORE"),
div(style = "width: 100%",
div(style = "display: inline-block;  margin: 10px 30px 10px 10px",
highchartOutput(ns("nps"), width = "120px", height = "120px")),
div(style = "display: inline-block; text-align: right; position: relative; margin-top: 30px; float:right;",
tagList(
#ranking_text("15", "45"),
br(),
br(),
uiOutput(ns("npsArrow")),
comparison_text(textOutput(ns("npsBench"), inline = TRUE), textOutput(ns("npsLast"), inline = TRUE))
)
)
),
box_foot(div("NPS (-100 - 100)", span(span("benchmark", style = "font-weight: bold;"), "(last period)", style = "float: right;"), style = "padding: 5px 0px;")),
box_foot(""),
div(highchartOutput(ns("npsTrend"), height = "200px"))
)
),
column(6,
box(
box_head(3, "CUSTOMER EXPERIENCE FACTORS"),
div(plotOutput(ns("storeExperience"), height = "360px"), style = "width: 95%; display: inline-block; ")
)
)
),
fluidRow(
column(3,
box(
box_foot("")
)
),
column(3,
box(
box_foot("")
)
),
column(6,
box(
box_foot(""),
div(style = "text-align: center;", htmlOutput(ns("legend")))
)
)
)
),
div(class = "module-footer",
span(uiOutput(ns("base"), inline = TRUE), style = "font-size: 12px;"),
div(tipify(downloadLink(ns("download"), label = icon("download"), class = "icon_btn"), title = "Export data", placement = "top"), class = "downloader"),
#div(tipify(downloadLink(ns("manual"), label = icon("info-circle"), class = "icon_btn"), title = "Download manual", placement = "top"), class = "downloader"),
div(tipify(span(id = ns("reset"), icon("refresh"), class = "action-button icon_btn"), title = "Reset all filters", placement = "top"), class = "resetter")
)
)
}
library("dplyr")
# load data for men
library("mfp")
install.packages("mfp")
data("bodyfat")
data("bodyfat")
library("TH.data")
data("bodyfat")
install.packages("TH.data")
# load packages
library("dplyr")
library("TH.data")
library("mfp")
# load data for women
data("bodyfat")
# load data for men
data("bodyfat")
# load packages
library("dplyr")
library("TH.data")
library("mfp")
# load data for women
data("bodyfat")
# load data for men
data("bodyfat")
library("dplyr")
# load data for women
library("TH.data")
data("bodyfat")
library("dplyr")
# load data for women
library("TH.data")
data("bodyfat")
women <- dataselected %>%
select(age, DEXfat, waistcirc, hipcirc, elbowbreadth, kneebreadth)
women <- women %>%
select(age, DEXfat, waistcirc, hipcirc, elbowbreadth, kneebreadth)
women <- women %>%
select(age, DEXfat, waistcirc, hipcirc, elbowbreadth, kneebreadth)
library("tidyverse")
install.packages("tidyverse")
library("dplyr")
library("tidyverse")
# load data for women
library("TH.data")
data("bodyfat")
# load packages
library("dplyr")
library("tidyverse")
# load data for women
library("TH.data")
data("bodyfat")
library("TH.data")
women <- data("bodyfat")
help(data)
women <- data("bodyfat") %>%
View(bodyfat)
women <- data("bodyfat") %>%
view(bodyfat)
women <- data("bodyfat")
library("dplyr")
library("tidyverse")
# load data for women
library("TH.data")
women <- data("bodyfat")
library("mfp")
data("bodyfat")
library("TH.data")
women <- data("bodyfat")
library("dplyr")
library("tidyverse")
# load data for women
library("TH.data")
data("bodyfat")
women <- bodyfat
women <- bodyfat
# load data for men
library("mfp")
data("bodyfat")
men <- bodyfat
install.packages("car")
library("car")
library("dplyr")
library("tidyverse")
library("corrplot")
library("car")
library("dplyr")
library("tidyverse")
library("corrplot")
library("leaps")
library("MASS")
library("glmnet")
setwd("/Users/Jessika/Documents/GitHub/SF2930-projects/project-1")
# Read data and fit linear model to data
men <- read.csv("train.csv")
men$X <- NULL
model_men <- lm(density ~ ., data = men)
anova(model_men)
summary(model_men)
plot(model_men)
### Residual analysis on the full model ###
n = nrow(model_men$model)
p = ncol(model_men$model) - 1
h_ii = lm.influence(model_men)$hat
hat_mean <- 2*p/n
# Residuals
res = residuals(model_men)
MS_res = sum(res^2)/(n-p)
res_std   = res / sqrt(MS_res)
res_stud  = res / sqrt(MS_res*(1-h_ii))
res_press = res / (1 - h_ii)
S_sq = ((n-p)*MS_res - res^2/(1-h_ii)) / (n-p-1)
res_rstud = res / sqrt(S_sq*(1-h_ii))
>>>>>>> 3917a7b0eb06c0297070dd0655cb31e104432a76
res_studlib = studres(model_men)
plot(res)
plot(res_stud)
plot(res_studlib)
plot(res_rstud)
plot(res_press)
<<<<<<< HEAD
plot(res)
plot(res_stud)
plot(res_studlib)
plot(res_rstud)
plot(res_press)
=======
plot(jmf)
>>>>>>> 3917a7b0eb06c0297070dd0655cb31e104432a76
jmf <- res - res_press
plot(jmf)
### Investigating points
# Leverage points
leverage <- which(h_ii > hat_mean)
# Influential points using COVRATIO
influential <- which(covratio(model_men) > 1+3*p/n | covratio(model_men) < 1-3*p/n)
# Influential + leverage points
lev_infl <- intersect(leverage, influential)
# Using this set of observation, manually look at each one to determine which are to be removed
men <- men[-c(30, 124, 178),]
# Fit linear model to reduced model
model_men <- lm(density ~ ., data = men)
anova(model_men)
summary(model_men)
plot(model_men)
cor %>%
corrplot.mixed()
# Spectral Decmoposition
X <- data.matrix(men[c(-1)], rownames.force = NA)
X_prim <- t(X)
X_corr <- X_prim %*% X
eigen <- eigen(X_corr, symmetric = TRUE, only.values = FALSE, EISPACK = FALSE)
lambda_max <- max(eigen$values)
lambda_min <- min(eigen$values)
k <- lambda_max %/% lambda_min
# Calculate VIF (if VIF_j > 10, we have a problem)
vif <- vif(model_men)
<<<<<<< HEAD
# MultikolinjÃ¤ritet + model selection mha LEAPS
y <- data.matrix(men[c(1)])
x <- data.matrix(men[c(-1)])
leaps <- leaps(x, y, method="adjr2", nbest = 1)
fold_width <- floor(nrow(men)/10)
adjR_sq_models <- NULL
for(model_ind in 1:13){
model <- leaps$which[model_ind,]
adjR_sq <- NULL
for(fold_ind in 0:9){
val_ind <- (fold_width*fold_ind+1):(fold_width*fold_ind + fold_width)
subset_vec <- rep(TRUE, nrow(men))
subset_vec[val_ind] <- FALSE
model_cv <- lm(formula(men[c(TRUE, model)]), data = men, subset = subset_vec)
pfit <- predict(model_cv, newdata = men[val_ind,])
y_val = men[val_ind,"density"]
SS_res <- sum((y_val-pfit)^2)
SS_R <- sum((pfit-mean(y_val))^2)
SS_T <- SS_R + SS_res
adjR_sq <- c(adjR_sq, SS_R / SS_T)
}
adjR_sq_models <- c(adjR_sq_models, mean(adjR_sq))
}
rm(SS_res, SS_R, SS_T, adjR_sq, y_val, subset_vec, model_cv,
pfit, model, fold_width, fold_ind, model_ind, val_ind)
adjR_sq_models
which.max(adjR_sq_models)
best_model <- leaps$which[which.max(adjR_sq_models),]
which.max(adjR_sq_models)
leaps$which[which.max(adjR_sq_models),]
lm(formula(men[c(TRUE, best_model)]), data = men)
best_model <- leaps$which[which.max(adjR_sq_models),]
best_model <- lm(formula(men[c(TRUE, best_model)]), data = men)
# CP
plot(rowSums(leaps$which,2), leaps$Cp, xlim = c(0,14), ylim = c(0,14))
# CP
=======
# Multikolinjäritet + model selection mha LEAPS
>>>>>>> 3917a7b0eb06c0297070dd0655cb31e104432a76
y <- data.matrix(men[c(1)])
x <- data.matrix(men[c(-1)])
leaps <- leaps(x, y, method="Cp")
plot(rowSums(leaps$which,2), leaps$Cp, xlim = c(0,14), ylim = c(0,14))
abline(0, 1)
text(rowSums(leaps$which,2), leaps$Cp, 1:length(rowSums(leaps$which,2))) # Kandidater: nr. 32, 48
<<<<<<< HEAD
# Vi prÃ¶var nr 32
=======
# Vi prövar nr 32
>>>>>>> 3917a7b0eb06c0297070dd0655cb31e104432a76
model_men_Cp <- lm(density ~ weight + abdomen + biceps + wrist, data = men)
anova(model_men_Cp)
summary(model_men_Cp)
plot(model_men_Cp)
<<<<<<< HEAD
# VÃ¤lj optimala lambda genom att iterera 100 ggr Ã¶ver 10-fold modeller
=======
# Multikolinjäritet + model selection mha LASSO
y <- as.matrix(men[c(1)])
x <- as.matrix(men[c(-1)])
# Välj optimala lambda genom att iterera 100 ggr över 10-fold modeller
>>>>>>> 3917a7b0eb06c0297070dd0655cb31e104432a76
lambdas = NULL
for (i in 1:5)
{
fit <- cv.glmnet(x, y, alpha = 1, nfolds = 10)
errors = data.frame(fit$lambda, fit$cvm)
lambdas <- rbind(lambdas, errors)
print("*")
}
<<<<<<< HEAD
=======
# Välj optimala lambda genom att iterera 100 ggr över 10-fold modeller
lambdas = NULL
for (i in 1:50)
{
fit <- cv.glmnet(x, y, alpha = 1, nfolds = 10)
errors = data.frame(fit$lambda, fit$cvm)
lambdas <- rbind(lambdas, errors)
print("*")
}
>>>>>>> 3917a7b0eb06c0297070dd0655cb31e104432a76
# take mean cvm for each lambda
lambdas <- aggregate(lambdas[, 2], list(lambdas$fit.lambda), mean)
# select the best one
bestindex = which(lambdas[2]==min(lambdas[2]))
bestlambda = lambdas[bestindex,1]
# and now run glmnet once more with it
lasso <- glmnet(x, y, alpha = 1, lambda=bestlambda)
pfit <- predict.glmnet(lasso, x, s = 0, type="response")
plot(pfit,y)
r2_lasso <- lasso$dev.ratio
model_men <- fit
<<<<<<< HEAD
y_test <- as.matrix(men_test[c(1)])
x_test <- as.matrix(men_test[c(-1)])
pfit <- predict.glmnet(lasso, x_test, s=0, type="response")
SS_res <- sum((y_test-pfit)^2)
SS_R <- sum((pfit-mean(y_test))^2)
SS_T <- SS_R + SS_res
R_sq_lasso <- SS_R / SS_T
pfit <- predict(model_men_Cp, as.data.frame(x_test))
SS_res <- sum((y_test-pfit)^2)
SS_R <- sum((pfit-mean(y_test))^2)
SS_T <- SS_R + SS_res
R_sq_bestsub <- SS_R / SS_T
men <- read.csv("train.csv")
men_test <- read.csv("test.csv")
men$X <- NULL
men_test$X <- NULL
library("car")
library("dplyr")
library("tidyverse")
library("corrplot")
library("leaps")
library("MASS")
library("glmnet")
setwd("C:/Users/Oscar Bergqvist/Desktop/SF2930-projects/project-1")
SI <- function(men){
men$weight <- c(0.001*453.6*men$weight)
men$height <- c(2.54*0.01*men$height)
men$neck <- c(0.01*men$neck)
men$chest <- c(0.01*men$chest)
men$abdomen <- c(0.01*men$abdomen)
men$hip <- c(0.01*men$hip)
men$thigh <- c(0.01*men$thigh)
men$knee <- c(0.01*men$knee)
men$ankle <- c(0.01*men$ankle)
men$biceps <- c(0.01*men$biceps)
men$forearm <- c(0.01*men$forearm)
men$wrist <- c(0.01*men$wrist)
return(men)
}
# Read data
men <- read.csv("train.csv")
men_test <- read.csv("test.csv")
men$X <- NULL
men_test$X <- NULL
# Initial model
model_men <- lm(density ~ ., data = men)
anova(model_men)
summary(model_men)
plot(model_men)
hat_mean <- 2*p/n
### Residual analysis on the full model ###
n = nrow(model_men$model)
p = ncol(model_men$model) - 1
h_ii = lm.influence(model_men)$hat
hat_mean <- 2*p/n
res = residuals(model_men)
MS_res = sum(res^2)/(n-p)
res_std   = res / sqrt(MS_res)
res_stud  = res / sqrt(MS_res*(1-h_ii))
res_press = res / (1 - h_ii)
S_sq = ((n-p)*MS_res - res^2/(1-h_ii)) / (n-p-1)
res_rstud = res / sqrt(S_sq*(1-h_ii))
res_studlib = studres(model_men)
res_studlib = studres(model_men)
plot(res)
plot(res_stud)
plot(res_studlib)
plot(res_rstud)
plot(res_press)
jmf <- res - res_press
plot(jmf)
rm(h_ii,hat_mean,jmp,MS_res,n,p,S_sq)
### Residual analysis on the full model ###
n = nrow(model_men$model)
p = ncol(model_men$model) - 1
h_ii = lm.influence(model_men)$hat
hat_mean <- 2*p/n
res = residuals(model_men)
MS_res = sum(res^2)/(n-p)
res_std   = res / sqrt(MS_res)
res_stud  = res / sqrt(MS_res*(1-h_ii))
res_press = res / (1 - h_ii)
S_sq = ((n-p)*MS_res - res^2/(1-h_ii)) / (n-p-1)
res_rstud = res / sqrt(S_sq*(1-h_ii))
plot(res)
plot(res_stud)
plot(res_studlib)
plot(res_rstud)
plot(res_press)
jmf <- res - res_press
plot(jmf)
rm(h_ii,hat_mean,jmf,MS_res,n,p,S_sq)
c(a,b) %<-% c(12,3)
a = list(12,3)
c = list("a" = 12, "b" = 3)
c$a
c$b
help("res")
library("car")
library("dplyr")
library("tidyverse")
library("corrplot")
library("leaps")
library("MASS")
library("glmnet")
setwd("C:/Users/Oscar Bergqvist/Desktop/SF2930-projects/project-1")
SI <- function(men){
men$weight <- c(0.001*453.6*men$weight)
men$height <- c(2.54*0.01*men$height)
men$neck <- c(0.01*men$neck)
men$chest <- c(0.01*men$chest)
men$abdomen <- c(0.01*men$abdomen)
men$hip <- c(0.01*men$hip)
men$thigh <- c(0.01*men$thigh)
men$knee <- c(0.01*men$knee)
men$ankle <- c(0.01*men$ankle)
men$biceps <- c(0.01*men$biceps)
men$forearm <- c(0.01*men$forearm)
men$wrist <- c(0.01*men$wrist)
return(men)
}
res <- function(model_men) {
n = nrow(model_men$model)
p = ncol(model_men$model) - 1
h_ii = lm.influence(model_men)$hat
hat_mean <- 2*p/n
res = residuals(model_men)
MS_res = sum(res^2)/(n-p)
res_std   = res / sqrt(MS_res)
res_stud  = res / sqrt(MS_res*(1-h_ii))
res_press = res / (1 - h_ii)
S_sq = ((n-p)*MS_res - res^2/(1-h_ii)) / (n-p-1)
res_rstud = res / sqrt(S_sq*(1-h_ii))
}
# Read data
men <- read.csv("train.csv")
men_test <- read.csv("test.csv")
men$X <- NULL
men_test$X <- NULL
# Transform to SI
men = SI(men)
men_test = SI(men_test)
# Read data
men <- read.csv("train.csv")
men_test <- read.csv("test.csv")
men$X <- NULL
men_test$X <- NULL
# Initial model
model_men <- lm(density ~ ., data = men)
anova(model_men)
summary(model_men)
plot(model_men)
plot(res$res_studlib)
### Residual analysis on the full model ###
res <- res(model_men)
plot(res$res)
res <- function(model_men) {
n = nrow(model_men$model)
p = ncol(model_men$model) - 1
h_ii = lm.influence(model_men)$hat
hat_mean <- 2*p/n
res = residuals(model_men)
MS_res = sum(res^2)/(n-p)
res_std   = res / sqrt(MS_res)
res_stud  = res / sqrt(MS_res*(1-h_ii))
res_press = res / (1 - h_ii)
S_sq = ((n-p)*MS_res - res^2/(1-h_ii)) / (n-p-1)
res_rstud = res / sqrt(S_sq*(1-h_ii))
return(list("res"=res,
"res_std"=res_std,
"res_stud"=res_stud,
"res_press"=res_press))
}
function (file, header = TRUE, sep = ",", quote = "\"", dec = ".",
fill = TRUE, comment.char = "", ...)
# Read data
men <- read.csv("train.csv")
men_test <- read.csv("test.csv")
men$X <- NULL
men_test$X <- NULL
# Initial model
model_men <- lm(density ~ ., data = men)
anova(model_men)
### Residual analysis on the full model ###
res <- res(model_men)
plot(res$res)
plot(res$res_stud)
plot(res$res_rstud)
library("car")
library("dplyr")
library("tidyverse")
library("corrplot")
library("leaps")
library("MASS")
library("glmnet")
library("car")
library("dplyr")
library("tidyverse")
library("corrplot")
library("leaps")
library("MASS")
library("glmnet")
setwd("C:/Users/Oscar Bergqvist/Desktop/SF2930-projects/project-1")
SI <- function(men){
men$weight <- c(0.001*453.6*men$weight)
men$height <- c(2.54*0.01*men$height)
men$neck <- c(0.01*men$neck)
men$chest <- c(0.01*men$chest)
men$abdomen <- c(0.01*men$abdomen)
men$hip <- c(0.01*men$hip)
men$thigh <- c(0.01*men$thigh)
men$knee <- c(0.01*men$knee)
men$ankle <- c(0.01*men$ankle)
men$biceps <- c(0.01*men$biceps)
men$forearm <- c(0.01*men$forearm)
men$wrist <- c(0.01*men$wrist)
return(men)
}
res <- function(model_men) {
n = nrow(model_men$model)
p = ncol(model_men$model) - 1
h_ii = lm.influence(model_men)$hat
hat_mean <- 2*p/n
res = residuals(model_men)
MS_res = sum(res^2)/(n-p)
res_std   = res / sqrt(MS_res)
res_stud  = res / sqrt(MS_res*(1-h_ii))
res_press = res / (1 - h_ii)
S_sq = ((n-p)*MS_res - res^2/(1-h_ii)) / (n-p-1)
res_rstud = res / sqrt(S_sq*(1-h_ii))
return(list("res"=res,
"res_std"=res_std,
"res_stud"=res_stud,
"res_rstud"=res_rstud,
"res_press"=res_press))
}
# Read data
men <- read.csv("train.csv")
men_test <- read.csv("test.csv")
men$X <- NULL
men_test$X <- NULL
# Transform to SI
men = SI(men)
men_test = SI(men_test)
# Read data
men <- read.csv("train.csv")
men_test <- read.csv("test.csv")
men$X <- NULL
men_test$X <- NULL
# Initial model
model_men <- lm(density ~ ., data = men)
### Residual analysis on the full model ###
res <- res(model_men)
# Leverage points
leverage <- which(h_ii > hat_mean)
# Leverage points
h_ii = lm.influence(model_men)$hat
leverage <- which(h_ii > hat_mean)
# Leverage points
n = nrow(model_men$model)
p = ncol(model_men$model) - 1
h_ii = lm.influence(model_men)$hat
hat_mean <- 2*p/n
leverage <- which(h_ii > hat_mean)
# Leverage points
n = nrow(model_men$model)
p = ncol(model_men$model) - 1
h_ii = lm.influence(model_men)$hat
hat_mean <- 2*p/n
leverage <- which(h_ii > hat_mean)
# Influential points using COVRATIO
influential <- which(covratio(model_men) > 1+3*p/n | covratio(model_men) < 1-3*p/n)
# Influential + leverage points
lev_infl <- intersect(leverage, influential)
=======
plot(lasso)
summary(lasso)
lasso
lasso$beta
lasso$dev.ratio
# Read data and fit linear model to data
men <- read.csv("train.csv")
men_test <- read.csv("test.csv")
men$X <- NULL
model_men <- lm(density ~ ., data = men)
>>>>>>> 3917a7b0eb06c0297070dd0655cb31e104432a76
# Using this set of observation, manually look at each one to determine which are to be removed
men <- men[-c(30, 124, 178),]
# Fit linear model to reduced model
model_men <- lm(density ~ ., data = men)
<<<<<<< HEAD
anova(model_men)
summary(model_men)
plot(model_men)
cor %>%
corrplot.mixed()
# Spectral Decmoposition
X <- data.matrix(men[c(-1)], rownames.force = NA)
# Spectral Decmoposition
X <- data.matrix(men[c(-1)], rownames.force = NA)
# Visualize correlation between different explanatory variables
men %>%
dplyr::select(age,weight,height,neck,chest,abdomen,hip,thigh,knee,ankle,biceps,forearm,wrist) %>%
cor %>%
corrplot.mixed()
leverage <- which(h_ii > hat_mean)
# Influential points using COVRATIO
influential <- which(covratio(model_men) > 1+3*p/n | covratio(model_men) < 1-3*p/n)
# Influential + leverage points
lev_infl <- intersect(leverage, influential)
# Fit linear model to reduced model
model_men <- lm(density ~ ., data = men)
anova(model_men)
summary(model_men)
plot(model_men)
cor %>%
corrplot.mixed()
# Visualize correlation between different explanatory variables
men %>%
dplyr::select(age,weight,height,neck,chest,abdomen,hip,thigh,knee,ankle,biceps,forearm,wrist) %>%
cor %>%
corrplot.mixed()
studres(model_men)
# Visualize correlation between different explanatory variables
men %>%
dplyr::select(age,weight,height,neck,chest,abdomen,hip,thigh,knee,ankle,biceps,forearm,wrist) %>%
cor %>%
corrplot.mixed()
plot(model_men)
cor %>%
corrplot.mixed()
plot(model_men)
# Visualize correlation between different explanatory variables
men %>%
dplyr::select(age,weight,height,neck,chest,abdomen,hip,thigh,knee,ankle,biceps,forearm,wrist) %>%
cor %>%
corrplot.mixed()
studres(model_men)
=======
>>>>>>> 3917a7b0eb06c0297070dd0655cb31e104432a76
# Spectral Decmoposition
X <- data.matrix(men[c(-1)], rownames.force = NA)
X_prim <- t(X)
X_corr <- X_prim %*% X
eigen <- eigen(X_corr, symmetric = TRUE, only.values = FALSE, EISPACK = FALSE)
lambda_max <- max(eigen$values)
lambda_min <- min(eigen$values)
k <- lambda_max %/% lambda_min
# Calculate VIF (if VIF_j > 10, we have a problem)
vif <- vif(model_men)
<<<<<<< HEAD
# MultikolinjÃ¤ritet + model selection mha LEAPS
y <- data.matrix(men[c(1)])
x <- data.matrix(men[c(-1)])
leaps <- leaps(x, y, method="adjr2", nbest = 1)
fold_width <- floor(nrow(men)/10)
adjR_sq_models <- NULL
for(model_ind in 1:13){
model <- leaps$which[model_ind,]
adjR_sq <- NULL
for(fold_ind in 0:9){
val_ind <- (fold_width*fold_ind+1):(fold_width*fold_ind + fold_width)
subset_vec <- rep(TRUE, nrow(men))
subset_vec[val_ind] <- FALSE
model_cv <- lm(formula(men[c(TRUE, model)]), data = men, subset = subset_vec)
pfit <- predict(model_cv, newdata = men[val_ind,])
y_val = men[val_ind,"density"]
SS_res <- sum((y_val-pfit)^2)
SS_R <- sum((pfit-mean(y_val))^2)
SS_T <- SS_R + SS_res
adjR_sq <- c(adjR_sq, SS_R / SS_T)
}
adjR_sq_models <- c(adjR_sq_models, mean(adjR_sq))
}
rm(SS_res, SS_R, SS_T, adjR_sq, y_val, subset_vec, model_cv,
pfit, model, fold_width, fold_ind, model_ind, val_ind)
best_model <- leaps$which[which.max(adjR_sq_models),]
best_model <- lm(formula(men[c(TRUE, best_model)]), data = men)
# CP
=======
# Multikolinjäritet + model selection mha LEAPS
>>>>>>> 3917a7b0eb06c0297070dd0655cb31e104432a76
y <- data.matrix(men[c(1)])
x <- data.matrix(men[c(-1)])
leaps <- leaps(x, y, method="Cp")
plot(rowSums(leaps$which,2), leaps$Cp, xlim = c(0,14), ylim = c(0,14))
abline(0, 1)
text(rowSums(leaps$which,2), leaps$Cp, 1:length(rowSums(leaps$which,2))) # Kandidater: nr. 32, 48
<<<<<<< HEAD
# Vi prÃ¶var nr 32
model_men_Cp <- lm(density ~ weight + abdomen + biceps + wrist, data = men)
anova(model_men_Cp)
summary(model_men_Cp)
plot(model_men_Cp)
# VÃ¤lj optimala lambda genom att iterera 100 ggr Ã¶ver 10-fold modeller
lambdas = NULL
for (i in 1:5)
=======
# Vi prövar nr 32
model_men_Cp <- lm(density ~ weight + abdomen + biceps + wrist, data = men)
#Predict:a på första modellen (all possible regressions)
p_apr <- predict(model_men_Cp, men_test)
# Multikolinjäritet + model selection mha LASSO
y <- as.matrix(men[c(1)])
x <- as.matrix(men[c(-1)])
# Välj optimala lambda genom att iterera 100 ggr över 10-fold modeller
lambdas = NULL
for (i in 1:50)
>>>>>>> 3917a7b0eb06c0297070dd0655cb31e104432a76
{
fit <- cv.glmnet(x, y, alpha = 1, nfolds = 10)
errors = data.frame(fit$lambda, fit$cvm)
lambdas <- rbind(lambdas, errors)
print("*")
}
# take mean cvm for each lambda
lambdas <- aggregate(lambdas[, 2], list(lambdas$fit.lambda), mean)
# select the best one
bestindex = which(lambdas[2]==min(lambdas[2]))
bestlambda = lambdas[bestindex,1]
# and now run glmnet once more with it
lasso <- glmnet(x, y, alpha = 1, lambda=bestlambda)
<<<<<<< HEAD
pfit <- predict.glmnet(lasso, x, s = 0, type="response")
plot(pfit,y)
r2_lasso <- lasso$dev.ratio
model_men <- fit
y_test <- as.matrix(men_test[c(1)])
x_test <- as.matrix(men_test[c(-1)])
pfit <- predict.glmnet(lasso, x_test, s=0, type="response")
SS_res <- sum((y_test-pfit)^2)
SS_R <- sum((pfit-mean(y_test))^2)
SS_T <- SS_R + SS_res
R_sq_lasso <- SS_R / SS_T
pfit <- predict(model_men_Cp, as.data.frame(x_test))
SS_res <- sum((y_test-pfit)^2)
SS_R <- sum((pfit-mean(y_test))^2)
SS_T <- SS_R + SS_res
R_sq_bestsub <- SS_R / SS_T
=======
p_lasso <- predict(lasso, men_test)
p_lasso <- predict.glmnet(lasso, men_test)
# and now run glmnet once more with it
lasso <- glmnet(x, y, alpha = 1, lambda=bestlambda)
View(lasso)
View(lasso)
View(lasso)
p_lasso <- predict(lasso$beta, men_test)
p_lasso <- predict(lasso, as.matrix(men_test), s = 0, type="response")
lasso$beta
p_lasso <- predict(lasso, as.matrix(men_test), s = 0)
help(""cbind2")
help("cbind2")
p_lasso <- predict(lasso, as.matrix(men_test), s = 0)
p_lasso <- predict(lasso, s=0, as.matrix(men_test))
p_lasso <- predict(lasso, s=bestlambda, as.matrix(men_test))
X <- as.matrix(men_test)
p_lasso <- predict(lasso, s=bestlambda, X)
X <- data.matrix(men_test)
p_lasso <- predict(lasso, s=bestlambda, X)
X <- as.matrix(men_test[c(-1)])
p_lasso <- predict(lasso, s=bestlambda, X)
X <- data.matrix(men_test[c(-1)])
p_lasso <- predict(lasso, s=bestlambda, X)
p_lasso <- predict.glmnet(lasso, s=bestlambda, X)
x.test <- model.matrix(density ~ ., men_test)[,-1]
pred <- predict(lasso, type='response', newx=x.test)
view(x.test)
View(men_test)
p_lasso <- predict.glmnet(lasso, s=bestlambda, newx=X)
# and now run glmnet once more with it
lasso <- glmnet(x, y, alpha = 1, lambda=bestlambda)
pfit <- predict.glmnet(lasso, x, s = 0, type="response")
pfit <- predict.glmnet(lasso, x[1:5,], s = 0, type="response")
pfit <- predict.glmnet(lasso, X, s = 0, type="response")
pfit <- predict.glmnet(lasso, x, s = 0, type="response")
str(X)
str(x)
X <- data.matrix(men_test[,-1])
str(X)
X <- men_test[,-1]
View(X)
men_test$density <- NULL
X <- data.matrix(men_test)
pfit <- predict.glmnet(lasso, X, s = 0, type="response")
X <- data.matrix(men_test)
str(X)
men_test
>>>>>>> 3917a7b0eb06c0297070dd0655cb31e104432a76

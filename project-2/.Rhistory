x - rep(xcenter, rep.int(nrow(x), ncol(x)))
}
x <- data.matrix(men[c(1,3,4,6,13)])
x <- center_colmeans(x)
# scale
x <- scale(x, center = FALSE, scale = TRUE)
x_prim <- t(x)
x_corr <- x_prim %*% x
eigen <- eigen(x_corr, symmetric = TRUE, only.values = FALSE, EISPACK = FALSE)
lambda_max <- max(eigen$values)
lambda_min <- min(eigen$values)
k <- lambda_max %/% lambda_min
men %>%
dplyr::select(biceps,wrist) %>%
cor %>%
corrplot.mixed()
vif <- vif(model_men)
summary(model_men)
library("car")
library("dplyr")
library("tidyverse")
library("corrplot")
library("leaps")
library("MASS")
library("glmnet")
men <- read.csv("train.csv")
men$X <- NULL
men <- men[-c(30, 124, 178),]
# Multikolinjäritet + model selection mha LEAPS
y <- data.matrix(men[c(1)])
x <- data.matrix(men[c(-1)])
leaps <- leaps(x, y, method="Cp")
#plot(rowSums(leaps$which,2), leaps$Cp, xlim = c(3,6), ylim = c(3,6))
#abline(0, 1)
#text(rowSums(leaps$which,2), leaps$Cp, 1:length(rowSums(leaps$which,2))) # Kandidat: nr. 32
# Vi prövar nr 32
model_men <- lm(density ~ abdomen + biceps + wrist, data = men)
#anova(model_men)
#summary(model_men)
#plot(model_men)
### Residual analysis on the full model ###
n = nrow(model_men$model)
p = ncol(model_men$model) - 1
h_ii = lm.influence(model_men)$hat
hat_mean <- 2*p/n
# Residuals
res = residuals(model_men)
MS_res = sum(res^2)/(n-p)
res_std   = res / sqrt(MS_res)
res_stud  = res / sqrt(MS_res*(1-h_ii))
res_press = res / (1 - h_ii)
S_sq = ((n-p)*MS_res - res^2/(1-h_ii)) / (n-p-1)
res_rstud = res / sqrt(S_sq*(1-h_ii))
res_studlib = studres(model_men)
# plot(res)
# plot(res_stud)
# plot(res_studlib)
# plot(res_rstud)
# plot(res_press)
jmf <- res - res_press
#plot(jmf)
### Investigating points
# Leverage points
leverage <- which(h_ii > hat_mean)
# Influential points using COVRATIO
influential <- which(covratio(model_men) > 1+3*p/n | covratio(model_men) < 1-3*p/n)
# Influential + leverage points
lev_infl <- intersect(leverage, influential)
# MULTICOLLINEARITY
# Scale to unity
# center
center_colmeans <- function(x) {
xcenter = colMeans(x)
x - rep(xcenter, rep.int(nrow(x), ncol(x)))
}
x <- data.matrix(men[c(3,7,12,14)])
x <- center_colmeans(x)
# scale
x <- scale(x, center = FALSE, scale = TRUE)
x_prim <- t(x)
x_corr <- x_prim %*% x
eigen <- eigen(x_corr, symmetric = TRUE, only.values = FALSE, EISPACK = FALSE)
lambda_max <- max(eigen$values)
lambda_min <- min(eigen$values)
k <- lambda_max %/% lambda_min
vif <- vif(model_men)
summary(model_men)
library("car")
library("dplyr")
library("tidyverse")
library("corrplot")
library("leaps")
library("MASS")
library("glmnet")
men <- read.csv("train.csv")
men$X <- NULL
men <- men[-c(30, 124, 178),]
# Multikolinjäritet + model selection mha LEAPS
y <- data.matrix(men[c(1)])
x <- data.matrix(men[c(-1)])
lambdas = NULL
for (i in 1:50)
{
fit <- cv.glmnet(x, y, alpha = 1, nfolds = 10)
errors = data.frame(fit$lambda, fit$cvm)
lambdas <- rbind(lambdas, errors)
}
# take mean cvm for each lambda
lambdas <- aggregate(lambdas[, 2], list(lambdas$fit.lambda), mean)
# select the best one
bestindex = which(lambdas[2]==min(lambdas[2]))
bestlambda = lambdas[bestindex,1]
# and now run glmnet once more with it
lasso <- glmnet(x, y, alpha = 1, lambda = bestlambda)
coef(lasso)
model_men <- lm(density ~ age + height + neck + abdomen + wrist, data = men)
### Residual analysis on the full model ###
n = nrow(model_men$model)
p = ncol(model_men$model) - 1
h_ii = lm.influence(model_men)$hat
hat_mean <- 2*p/n
# Residuals
res = residuals(model_men)
MS_res = sum(res^2)/(n-p)
res_std   = res / sqrt(MS_res)
res_stud  = res / sqrt(MS_res*(1-h_ii))
res_press = res / (1 - h_ii)
S_sq = ((n-p)*MS_res - res^2/(1-h_ii)) / (n-p-1)
res_rstud = res / sqrt(S_sq*(1-h_ii))
res_studlib = studres(model_men)
# plot(res)
# plot(res_stud)
# plot(res_studlib)
# plot(res_rstud)
# plot(res_press)
jmf <- res - res_press
#plot(jmf)
### Investigating points
# Leverage points
leverage <- which(h_ii > hat_mean)
# Influential points using COVRATIO
influential <- which(covratio(model_men) > 1+3*p/n | covratio(model_men) < 1-3*p/n)
# Influential + leverage points
lev_infl <- intersect(leverage, influential)
# MULTICOLLINEARITY
# Scale to unity
# center
center_colmeans <- function(x) {
xcenter = colMeans(x)
x - rep(xcenter, rep.int(nrow(x), ncol(x)))
}
x <- data.matrix(men[c(1,3,4,6,13)])
x <- center_colmeans(x)
# scale
x <- scale(x, center = FALSE, scale = TRUE)
x_prim <- t(x)
x_corr <- x_prim %*% x
eigen <- eigen(x_corr, symmetric = TRUE, only.values = FALSE, EISPACK = FALSE)
lambda_max <- max(eigen$values)
lambda_min <- min(eigen$values)
k <- lambda_max %/% lambda_min
vif <- vif(model_men)
summary(model_men)
# Prediction interval
predict(model_men, x, interval="predict")
predict(model_men, newdata = test, interval="predict")
test <- read.csv("train.csv")
test$X <- NULL
predict(model_men, newdata = test, interval="predict")
test <- read.csv("train.csv")
View(test)
test$X <- NULL
# Read data and fit linear model to data
men <- read.csv("train.csv")
men_test <- read.csv("test.csv")
library("car")
library("dplyr")
library("tidyverse")
library("corrplot")
library("leaps")
library("MASS")
library("glmnet")
men <- read.csv("train.csv")
men$X <- NULL
men <- men[-c(30, 124, 178),]
# Multikolinjäritet + model selection mha LEAPS
y <- data.matrix(men[c(1)])
x <- data.matrix(men[c(-1)])
lambdas = NULL
for (i in 1:50)
{
fit <- cv.glmnet(x, y, alpha = 1, nfolds = 10)
errors = data.frame(fit$lambda, fit$cvm)
lambdas <- rbind(lambdas, errors)
}
# take mean cvm for each lambda
lambdas <- aggregate(lambdas[, 2], list(lambdas$fit.lambda), mean)
# select the best one
bestindex = which(lambdas[2]==min(lambdas[2]))
bestlambda = lambdas[bestindex,1]
# and now run glmnet once more with it
lasso <- glmnet(x, y, alpha = 1, lambda = bestlambda)
coef(lasso)
model_men <- lm(density ~ age + height + neck + abdomen + wrist, data = men)
### Residual analysis on the full model ###
n = nrow(model_men$model)
p = ncol(model_men$model) - 1
h_ii = lm.influence(model_men)$hat
hat_mean <- 2*p/n
# Residuals
res = residuals(model_men)
MS_res = sum(res^2)/(n-p)
res_std   = res / sqrt(MS_res)
res_stud  = res / sqrt(MS_res*(1-h_ii))
res_press = res / (1 - h_ii)
S_sq = ((n-p)*MS_res - res^2/(1-h_ii)) / (n-p-1)
res_rstud = res / sqrt(S_sq*(1-h_ii))
res_studlib = studres(model_men)
# plot(res)
# plot(res_stud)
# plot(res_studlib)
# plot(res_rstud)
# plot(res_press)
jmf <- res - res_press
#plot(jmf)
### Investigating points
# Leverage points
leverage <- which(h_ii > hat_mean)
# Influential points using COVRATIO
influential <- which(covratio(model_men) > 1+3*p/n | covratio(model_men) < 1-3*p/n)
# Influential + leverage points
lev_infl <- intersect(leverage, influential)
# MULTICOLLINEARITY
# Scale to unity
# center
center_colmeans <- function(x) {
xcenter = colMeans(x)
x - rep(xcenter, rep.int(nrow(x), ncol(x)))
}
x <- data.matrix(men[c(1,3,4,6,13)])
x <- center_colmeans(x)
# scale
x <- scale(x, center = FALSE, scale = TRUE)
x_prim <- t(x)
x_corr <- x_prim %*% x
eigen <- eigen(x_corr, symmetric = TRUE, only.values = FALSE, EISPACK = FALSE)
lambda_max <- max(eigen$values)
lambda_min <- min(eigen$values)
k <- lambda_max %/% lambda_min
vif <- vif(model_men)
summary(model_men)
# Prediction interval
test <- read.csv("test.csv")
test$X <- NULL
predict(model_men, newdata = test, interval = "predict")
plot(predict)
intervals <- predict(model_men, newdata = test, interval = "predict")
plot(intervals)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("foreach")
install.packages("foreach")
library(ggplot2)
library(foreach)
library(xlsx)
glmdata <- read.table("Tractors.csv", header=TRUE, sep=";", dec="," )
setwd("/Users/Jessika/Documents/GitHub/SF2930-projects/project-2")
glmdata <- read.table("Tractors.csv", header=TRUE, sep=";", dec="," )
setwd("/Users/Jessika/Documents/GitHub/SF2930-projects/project-2")
glmdata <- read.table("Tractors.csv", header=TRUE, sep=";", dec="," )
View(glmdata)
which(glmdata$Weight = 0)
which(glmdata$Weight == 0)
glmdata$weight_group <- cut(glmdata$Weight,
breaks = c(-Inf, 1000, 2000, 3000, 4000, 5000, Inf),
labels = c("01_<1000kg", "02_1000-1999kg", "03_2000-2999kg", "04_3000-3999kg", "05_4000-4999kg", "06_>=5000kg"),
right = FALSE)
glmdata3 <-
data.frame(rating.factor =
c(rep("Weight", nlevels(glmdata2$weight_group)),
rep("Climate", nlevels(glmdata2$Climate)),
rep("ActivityCode", nlevels(glmdata2$ActivityCode))),
class =
c(levels(glmdata2$weight_group),
levels(glmdata2$Climate),
levels(glmdata2$ActivityCode)),
stringsAsFactors = FALSE)
glmdata2 <- aggregate(glmdata[,6:8],by=list(weight_group = glmdata$weight_group,
Climate = glmdata$Climate,
ActivityCode = glmdata$ActivityCode), FUN=sum, na.rm=TRUE)
View(glmdata2)
glmdata3 <-
data.frame(rating.factor =
c(rep("Weight", nlevels(glmdata2$weight_group)),
rep("Climate", nlevels(glmdata2$Climate)),
rep("ActivityCode", nlevels(glmdata2$ActivityCode))),
class =
c(levels(glmdata2$weight_group),
levels(glmdata2$Climate),
levels(glmdata2$ActivityCode)),
stringsAsFactors = FALSE)
View(glmdata3)
View(glmdata2)
new.cols <-
foreach (rating.factor = c("weight_group", "Climate", "ActivityCode"),
.combine = rbind) %do%
{
nclaims <- tapply(glmdata2$NoOfClaims, glmdata2[[rating.factor]], sum)
sums <- tapply(glmdata2$Duration, glmdata2[[rating.factor]], sum)
n.levels <- nlevels(glmdata2[[rating.factor]])
contrasts(glmdata2[[rating.factor]]) <-
contr.treatment(n.levels)[rank(-sums, ties.method = "first"), ]
data.frame(duration = sums, n.claims = nclaims)
}
View(new.cols)
glmdata3 <- cbind(glmdata3, new.cols)
rm(new.cols)
new.cols <-
foreach (rating.factor = c("weight_group", "Climate", "ActivityCode"),
.combine = rbind) %do%
{
nclaims <- tapply(glmdata2$NoOfClaims, glmdata2[[rating.factor]], sum)
sums <- tapply(glmdata2$Duration, glmdata2[[rating.factor]], sum)
n.levels <- nlevels(glmdata2[[rating.factor]])
contrasts(glmdata2[[rating.factor]]) <-
contr.treatment(n.levels)[rank(-sums, ties.method = "first"), ]
data.frame(duration = sums, n.claims = nclaims)
}
rm(new.cols)
model.frequency <-
glm(NoOfClaims ~ weight_group + Climate + ActivityCode + offset(log(Duration)),
data = glmdata2, family = poisson)
View(model.frequency)
help(glm)
rels <- coef(model.frequency)
rels <- exp(rels[1] + rels[-1])/exp(rels[1])
glmdata <- read.table("Tractors.csv", header=TRUE, sep=";", dec="," )
View(glmdata)
hist(glmdata$Weight)
boxplot(glmdata$Weight)
hist(glmdata$Weight, breaks = 30)
hist(glmdata$Weight, breaks = 50)
hist(glmdata$Weight, breaks = 100)
hist(glmdata$Weight, breaks = 200)
hist(glmdata$Weight, breaks = 400)
glmdata_test <- glmdata$Weight > 500
rm(glmdata_test)
hist(glmdata$Duration, breaks = 100)
hist(glmdata$Duration, breaks = 12)
hist(glmdata$Duration, breaks = 14)
hist(glmdata$Duration, breaks = 14)
hist(glmdata$Duration, breaks = 10)
hist(glmdata$Duration, breaks = 5)
hist(glmdata$Duration, breaks = 12)
hist(glmdata$Duration, breaks = 20)
hist(glmdata$Duration, breaks = 15)
hist(glmdata$Duration, breaks = 15)
hist(glmdata$Duration, breaks = 10)
hist(glmdata$Duration, breaks = 12)
hist(glmdata$Duration, breaks = 12)
hist(glmdata$Duration, breaks = 11)
hist(glmdata$Duration, breaks = 13)
hist(glmdata$Duration, breaks = 14)
hist(glmdata$Duration, breaks = 15)
hist(glmdata$age, breaks = 15)
hist(glmdata$VehicleAge, breaks = 15)
916/12
max(glmdata$VehicleAge)
min(glmdata$VehicleAge)
length(which(glmdata$VehicleAge > 30))
7230/99074
glmdata$age_group <- cut(glmdata$VehicleAge,
breaks = c(-Inf, 5, 15, 25, 35, 50, Inf),
labels = c("01_<5yr", "02_5-15yr", "03_15-25yr", "04_25-35yr", "05_35-50yr", "06_>=50yr"),
right = FALSE)
View(glmdata)
length(which(glmdata$age_group = 06_>50yr))
length(which(glmdata$age_group = '06_>50yr'))
length(which(glmdata$age_group == '06_>50yr'))
length(names(glmdata$age_group == '06_>50yr'))
name(glmdata$age_group)
min(glmdata$RiskYear)
max(glmdata$RiskYear)
hist(glmdata$Duration)
glmdata2 <- aggregate(glmdata[,6:8],by=list(weight_group = glmdata$weight_group,
age_group = glmdata$age_group,
Climate = glmdata$Climate,
ActivityCode = glmdata$ActivityCode), FUN=sum, na.rm=TRUE)
glmdata2 <- aggregate(glmdata[,6:8],by=list(weight_group = glmdata$weight_group,
age_group = glmdata$age_group,
Climate = glmdata$Climate,
ActivityCode = glmdata$ActivityCode), FUN=sum, na.rm=TRUE)
glmdata2 <- aggregate(glmdata[,6:9],by=list(weight_group = glmdata$weight_group,
age_group = glmdata$age_group,
Climate = glmdata$Climate,
ActivityCode = glmdata$ActivityCode), FUN=sum, na.rm=TRUE)
glmdata2 <- aggregate(glmdata[,6:9],by=list(weight_group = glmdata$weight_group,
age_group = glmdata$age_group,
Climate = glmdata$Climate,
ActivityCode = glmdata$ActivityCode), FUN=sum, na.rm=TRUE)
glmdata <- read.table("Tractors.csv", header=TRUE, sep=";", dec="," )
glmdata$weight_group <- cut(glmdata$Weight,
breaks = c(-Inf, 1000, 2000, 3000, 4000, 5000, Inf),
labels = c("01_<1000kg", "02_1000-1999kg", "03_2000-2999kg", "04_3000-3999kg", "05_4000-4999kg", "06_>=5000kg"),
right = FALSE)
glmdata$age_group <- cut(glmdata$VehicleAge,
breaks = c(-Inf, 5, 15, 25, 35, 50, Inf),
labels = c("01_<5yr", "02_5-15yr", "03_15-25yr", "04_25-35yr", "05_35-50yr", "06_>=50yr"),
right = FALSE)
View(glmdata)
glmdata2 <- aggregate(glmdata[,6:8],by=list(weight_group = glmdata$weight_group,
age_group = glmdata$age_group,
Climate = glmdata$Climate,
ActivityCode = glmdata$ActivityCode), FUN=sum, na.rm=TRUE)
View(glmdata2)
glmdata3 <-
data.frame(rating.factor =
c(rep("Weight", nlevels(glmdata2$weight_group)),
rep("Climate", nlevels(glmdata2$Climate)),
rep("ActivityCode", nlevels(glmdata2$ActivityCode))),
class =
c(levels(glmdata2$weight_group),
levels(glmdata2$Climate),
levels(glmdata2$ActivityCode)),
stringsAsFactors = FALSE)
View(glmdata3)
glmdata3 <-
data.frame(rating.factor =
c(rep("Weight", nlevels(glmdata2$weight_group)),
rep("Climate", nlevels(glmdata2$Climate)),
rep("ActivityCode", nlevels(glmdata2$ActivityCode))
rep("Age", nlevels(glmdata2$age_group))),
class =
c(levels(glmdata2$weight_group),
levels(glmdata2$Climate),
levels(glmdata2$ActivityCode),
levels(glmdata2$age_group)),
stringsAsFactors = FALSE)
glmdata3 <-
data.frame(rating.factor =
c(rep("Weight", nlevels(glmdata2$weight_group)),
rep("Climate", nlevels(glmdata2$Climate)),
rep("ActivityCode", nlevels(glmdata2$ActivityCode)),
rep("Age", nlevels(glmdata2$age_group))),
class =
c(levels(glmdata2$weight_group),
levels(glmdata2$Climate),
levels(glmdata2$ActivityCode),
levels(glmdata2$age_group)),
stringsAsFactors = FALSE)
new.cols <-
foreach (rating.factor = c("weight_group", "Climate", "ActivityCode", "age_group"),
.combine = rbind) %do%
{
nclaims <- tapply(glmdata2$NoOfClaims, glmdata2[[rating.factor]], sum)
sums <- tapply(glmdata2$Duration, glmdata2[[rating.factor]], sum)
n.levels <- nlevels(glmdata2[[rating.factor]])
contrasts(glmdata2[[rating.factor]]) <-
contr.treatment(n.levels)[rank(-sums, ties.method = "first"), ]
data.frame(duration = sums, n.claims = nclaims)
}
glmdata3 <- cbind(glmdata3, new.cols)
rm(new.cols)
new.cols <-
foreach (rating.factor = c("weight_group", "Climate", "ActivityCode", "age_group"),
.combine = rbind) %do%
{
nclaims <- tapply(glmdata2$NoOfClaims, glmdata2[[rating.factor]], sum)
sums <- tapply(glmdata2$Duration, glmdata2[[rating.factor]], sum)
n.levels <- nlevels(glmdata2[[rating.factor]])
contrasts(glmdata2[[rating.factor]]) <-
contr.treatment(n.levels)[rank(-sums, ties.method = "first"), ]
data.frame(duration = sums, n.claims = nclaims)
}
glmdata3 <- cbind(glmdata3, new.cols)
new.cols <-
foreach (rating.factor = c("weight_group", "Climate", "ActivityCode", "age_group"),
.combine = rbind) %do%
{
nclaims <- tapply(glmdata2$NoOfClaims, glmdata2[[rating.factor]], sum)
sums <- tapply(glmdata2$Duration, glmdata2[[rating.factor]], sum)
n.levels <- nlevels(glmdata2[[rating.factor]])
contrasts(glmdata2[[rating.factor]]) <-
contr.treatment(n.levels)[rank(-sums, ties.method = "first"), ]
data.frame(duration = sums, n.claims = nclaims)
}
glmdata3 <- cbind(glmdata3, new.cols)
glmdata3 <-
data.frame(rating.factor =
c(rep("Weight", nlevels(glmdata2$weight_group)),
rep("Climate", nlevels(glmdata2$Climate)),
rep("ActivityCode", nlevels(glmdata2$ActivityCode)),
rep("Age", nlevels(glmdata2$age_group))),
class =
c(levels(glmdata2$weight_group),
levels(glmdata2$Climate),
levels(glmdata2$ActivityCode),
levels(glmdata2$age_group)),
stringsAsFactors = FALSE)
new.cols <-
foreach (rating.factor = c("weight_group", "Climate", "ActivityCode", "age_group"),
.combine = rbind) %do%
{
nclaims <- tapply(glmdata2$NoOfClaims, glmdata2[[rating.factor]], sum)
sums <- tapply(glmdata2$Duration, glmdata2[[rating.factor]], sum)
n.levels <- nlevels(glmdata2[[rating.factor]])
contrasts(glmdata2[[rating.factor]]) <-
contr.treatment(n.levels)[rank(-sums, ties.method = "first"), ]
data.frame(duration = sums, n.claims = nclaims)
}
glmdata3 <- cbind(glmdata3, new.cols)
View(glmdata2)
